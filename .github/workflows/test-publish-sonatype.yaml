name: publish to sonatype

permissions:
  # This is required for requesting the OIDC token
  id-token: write

on:
  workflow_dispatch:
    inputs:
      target-branch:
        type: choice
        options:
          - main    
jobs:
  promote-from-stage-to-prod:
    runs-on: ${{ vars.BUILD_CONTAINER_DISTRO_VERSION }}
    steps: 
        - name: Checkout
          uses: actions/checkout@v4
          with:
            # Fetch the whole history to prevent unrelated history errors
            fetch-depth: "0"
            ref: ${{ inputs.target-branch }}

        - name: Setup Java
          uses: actions/setup-java@v4
          with:
            distribution: "semeru" # See 'Supported distributions' for available options
            java-version: 21
            gpg-private-key: ${{ secrets.GPG_SECRET }}
            gpg-passphrase: GPG_PASS

        - name: build
          env:
            GPG_PASS: ${{ secrets.GPG_PASS }}
          run: |
            mvn clean source:jar javadoc:jar install gpg:sign -DskipTests

        - name: generate hashes in target folder
          run: |
            TARGET_DIR="target"
            
            # Recursively find the desired files and generate the hashes
            find "$TARGET_DIR" \
              \( -name '*.jar' -o -name '*.jar.asc' -o -name '*.pom' -o -name '*.pom.asc' \) -type f \
            | while read -r file; do
                # Generate MD5 hash (store just the hash in <file>.md5)
                md5sum "$file" | awk '{print $1}' > "${file}.md5"
                
                # Generate SHA1 hash (store just the hash in <file>.sha1)
                sha1sum "$file" | awk '{print $1}' > "${file}.sha1"
                
                echo "Generated MD5 and SHA1 for: $file"
            done

        - name: Debug show staged artifacts
          run: |
            ls -la target/

        - name: stage artifacts
          run: |
            mkdir -p {staging,github,sonatype}
            mkdir -p staging/net/zimaspace/java-test-bench/1.0/
            cp target/*.jar staging/net/zimaspace/java-test-bench/1.0/
            cp target/*.pom staging/net/zimaspace/java-test-bench/1.0/
            cp target/*.asc staging/net/zimaspace/java-test-bench/1.0/
            cp target/*.pom staging/net/zimaspace/java-test-bench/1.0/
            cp target/*.md5 staging/net/zimaspace/java-test-bench/1.0/
            cp target/*.sha1 staging/net/zimaspace/java-test-bench/1.0/

            ls staging

        - name: get-build-name-number
          id: get-build-name-number
          run: |
              echo build-name-number="$(echo 'clients-java-push-to-dev_aerospike-test-bench-jdk21/${{ github.run_id }}')" >> $GITHUB_OUTPUT

        - uses: ./.github/actions/publish-to-sonatype
          id: publish-to-sonatype
          with:
            build-name-number: ${{ steps.get-build-name-number.outputs.build-name-number }}
            publish-user: ${{ secrets.CICD_USERNAME }}
            publish-password: ${{ secrets.CICD_PASSWORD }}
            validation-max-number-checks: ${{ vars.VALIDATION_MAX_NUMBER_CHECKS }}
            sonatype-domain-name: ${{ vars.SONATYPE_DOMAIN_NAME }}
       
        - name: Generate release notes
          id: get-release-notes
          run: |
            RELEASE_NOTES=$(git log $(git describe --tags --abbrev=0)..HEAD --pretty=format:"- %s")
            echo "release-notes<<EOF" >> $GITHUB_OUTPUT
            echo "${RELEASE_NOTES}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT           

        - id: get-build-name-number-json
          run: |
            echo build-name-number-json=$(echo "${{ steps.get-build-name-number.outputs.build-name-number }}" | jq -R '[.]') >> $GITHUB_OUTPUT
             
        # Publishing release to github
        # Note this action knows how to process json internally. It expects inputs to be in json format
        - uses: ./.github/actions/publish-to-github
          with:
            release-notes: ${{ steps.get-release-notes.outputs.release-notes }}
            github-token: ${{ secrets.CLIENT_BOT_PAT }}
            build-name-number: ${{ steps.get-build-name-number-json.outputs.build-name-number-json }} # json format
            artifact-version: '["1.0"]'
